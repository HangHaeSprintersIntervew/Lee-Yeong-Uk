1. 객체지향이란 무엇인가요?

객체지향은 컴퓨터 프로그램을 여러개의 독립된 객체 단위의 모임으로 파악하는 것 입니다. 

```<추가 답변>
객체 지향 프로그래밍은 객체 내부에 자료형과 함수가 같이 존재하며

가능한 모든 물리적, 논리적 요소들을 모두 객체로 만든 뒤 그 객체간 유기적인 상호작용을 통해 로직을 구현하는 것이 객체지향 프로그래밍 입니다.

프로그램이 더 유연하고 변경이 용이하게 만들기 때문에 
대규모 소프트웨어 개발에 주로 사용되며,

객체지향의 특징으로는 추상화, 캡슐화, 상속, 다형성 4개가 있습니다.
```
-------------------------------------------------------------------------------------
2. 객체지향 프로그래밍의 장점을 설명해주세요

객체를 중심으로 프로그래밍 하기 때문에

사람의 관점에서 프로그램을 이해하고 파악하기 쉬우며

재사용성, 융통성, 확장성이 높습니다.

-------------------------------------------------------------------------------------
3. 객체 지향적 설계 원칙이란?

5원칙 SOLID, 
단일 책임 원칙(Single Responsibility Principle)
개방 폐쇄 원칙(Open Closed Principle)
리스코프 치환 원칙(Listov substitution Principle)
인터페이스 분리 원칙(Interface Segregation Principle)
의존 역전 원칙(Dependency Inversion Principle) 이 있습니다.

```<추가 답변>```
단일 책임 원칙은  한 클래스는 하나의 책임만 가져야 하는것이며,
이는 클래스에 변경이 있을때 파급 효과가 적으면 해당 원칙을 잘 따른것입니다.

개방 폐쇄 원칙은 소포트웨어 요소는 확장에서 열려 있지만 변경에는 닫혀 있어야 
하는 것입니다.

리스코프 치환 원칙은 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 
하위 타입의 인스턴스로 바꿀 수 있어야 하는 것입니다.
하위 클래스는 인터페이스 규약을 지켜야 하며, 인터페이스를 구현한 구현체를 믿고
사용하기 위해 이 원칙을 지켜야 합니다.

인터페이스 분리 원칙은 특정 클라이언트를 위한 인터페이스를 여러개로 만드는것이,
공용으로 사용하는 인터페이스 하나보다 더 좋은 것입니다.
예를 들어 자동차라는 인터페이스가 있다면 해당 인터페이스를 운전, 정비 등등 세세한 인터페이스로 나누어 만드는 것입니다.

의존관계 역전 원칙은 구체화에 의존하는 것이 아닌, 추상화에 의존하는 것입니다.
즉, 구현체를 바라보는 것이 아닌, 인터페이스를 바라보는 것 입니다.

(추가 대답)
다형성 만으로는 OCP, DIP를 지킬 수 없습니다. 클라이언트의 코드를 함께 변경해야 하기 때문입니다. 인터페이스만 있고 구현체가 없다면 에러가 발생하기 때문입니다.

사용 영역(클라이언트 코드)과 구성 영역(config 파일)으로 분리하였을 때, 구성 영역에서만 변경해 준다면
사용 영역의 코드를 손 대지 않고 변경할 수 있습니다.
```
-------------------------------------------------------------------------------------
4. 객체지향 프로그래밍 키워드

클래스, 인스턴스

클래스는 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐
속성, 행위등을 변수와 메소드로 정의한 것입니다.
인스턴스는 클래스에서 정의한 것을 토대로 실제 메모리에 할당된 것입니다.

추상화

공통의 속성이나 기능을 묶어 이름을 붙이는 것 입니다.
즉, 클래스를 추상적으로 설계하는 것을 말합니다.

캡슐화

캡슐화는 기능과 특성의 모음을 클래스라는 캡슐에 분류해서 넣는것을 의미합니다.
캡슐화를 통해 외부에서 객체에 접근하는 것을 조절할 수 있으며,
코드 수정시 연관된 캡슐만 수정할 수 있어 관리 측면에서 용이합니다.

상속

상속은 부모 클래스의 속성, 기능을 그대로 이어받아 사용할 수 있으며
기능의 수정이 필요한 경우 자식클래스에서 해당 기능만 재정의하여 사용할 수 있습니다.

다형성

다형성은 
부모 클래스의 메소드를 자식 클래스가 
오버라이딩 하여 자신의 역할에 맞게 사용하는 것입니다.

-------------------------------------------------------------------------------------
5. 어떤 코드가 클린 코드라고 생각하시나요?

제 3자가 보아도 코드를 읽는데 어려움이 없으며

중복이 없고 최소한의 함수, 클래스, 변수로 코드를 작성하여

단번에 이해할 수 있게 만들어야 합니다.

또한 이름을 잘 표현하여 특정 기능을 수행하는것을 알려주는것도 클린 코드라고 생각합니다. 
-------------------------------------------------------------------------------------
6. RESTful 한게 무엇인지 아는대로 설명하세요.

일반적으로 RESTful은 REST 라는 아키텍쳐를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어입니다.

```<추가답변>
REST의 특징으로는 

Uniform Interface
URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행

Stateless
무상태성 성격을 가져 서비스의 자유도가 높아지고 불필요한 정보를 관리하지 않음

Caching
HTTP라는 웹 표준을 사용하기 때문에 캐싱 기능을 적용 가능함.
Last-Modified 혹은 E-tag 를 사용하면 캐싱 구현 가능

Client-Server
REST 서버는 API 제공, 클라이언트는 사용자 인증 등을 관리하는 구조로 각각의 역할이
확실히 구분되어 개발해야할 내용이 명확해지며 상호 의존성이 줄어듦.

Hierarchial system
다중 계층으로 구성될 수 있으며 보안, 로드밸런싱, 암호화 계층을 추가해
구조상의 유연성을 둘 수 있습니다.

Code on demand 
REST API 메세지만 보고도 이를 쉽게 이해할 수 있는 자체 표현 구조로 되어있음.

가 있습니다.
```

누군가에 의해 공식 문서등으로 정리된것은 아니며, 일관된 컨벤션을 통해 개발 과정중 API에 대한 이해 및 호환성을 높이기 위해 사용됩니다.

1. 우선 리소스와 행위를 명시적이고 직관적으로 분리하며

2. 메세지는 헤더와 바디를 통해 명확하게 분리해서 사용해야 합니다.

3. API버전도 항상 관리가 되며

4. 서버와 클라이언트가 같은 방식을 사용해서 요청하도록 합니다.

이러한 설계의 장점은
원하는 타입으로 데이터를 주고 받을수 있으며
기존 웹 인프라를 그대로 사용할 수 있고
멀티플랫폼 지원 및 연동이 용이한 것입니다.
